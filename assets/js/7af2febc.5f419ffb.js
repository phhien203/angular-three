"use strict";(self.webpackChunklibs_documentations=self.webpackChunklibs_documentations||[]).push([[681],{9613:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4081:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(9496);function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},5468:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(2848),o=n(9496),i=n(4390),l=n(7269),r=n(1626),s="tabItem_JjfE";function p(e){var t,n,i,p=e.lazy,m=e.block,c=e.defaultValue,d=e.values,u=e.groupId,h=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=d?d:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,l.lx)(b,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===c?c:null!=(t=null!=c?c:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=g[0])?void 0:i.props.value;if(null!==v&&!b.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.UB)(),f=N.tabGroupChoices,w=N.setTabGroupChoices,y=(0,o.useState)(v),C=y[0],T=y[1],x=[],M=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=u){var E=f[u];null!=E&&E!==C&&b.some((function(e){return e.value===E}))&&T(E)}var R=function(e){var t=e.currentTarget,n=x.indexOf(t),a=b[n].value;a!==C&&(M(t),T(a),null!=u&&w(u,a))},Z=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;n=x[a]||x[0];break;case"ArrowLeft":var o=x.indexOf(e.currentTarget)-1;n=x[o]||x[x.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},h)},b.map((function(e){var t=e.value,n=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return x.push(e)},onKeyDown:Z,onFocus:R,onClick:R},i,{className:(0,r.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),p?(0,o.cloneElement)(g.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function m(e){var t=(0,i.Z)();return o.createElement(p,(0,a.Z)({key:String(t)},e))}},5636:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return m},default:function(){return g},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var a=n(2848),o=n(9213),i=(n(9496),n(9613)),l=n(5468),r=n(4081),s=["components"],p={id:"first-scene",title:"Our first scene",sidebar_label:"Our first scene"},m=void 0,c={unversionedId:"first-scene",id:"first-scene",title:"Our first scene",description:"This basic tutorial will help us setup our first Angular Three scene and introduce us to its core concepts.",source:"@site/docs/first-scene.mdx",sourceDirName:".",slug:"/first-scene",permalink:"/docs/first-scene",editUrl:"https://github.com/nartc/angular-three/tree/main/libs/documentations/docs/docs/first-scene.mdx",tags:[],version:"current",frontMatter:{id:"first-scene",title:"Our first scene",sidebar_label:"Our first scene"},sidebar:"docs",previous:{title:"Migrate to v5",permalink:"/docs/getting-started/migrate-to-v5"},next:{title:"Inputs",permalink:"/docs/core/inputs"}},d={},u=[{value:"TLDR;",id:"tldr",level:2},{value:"Setting up the Canvas",id:"setting-up-the-canvas",level:2},{value:"Adding a Mesh",id:"adding-a-mesh",level:2},{value:"Animate the cube",id:"animate-the-cube",level:2},{value:"Making our cube an Angular component",id:"making-our-cube-an-angular-component",level:2},{value:"Adding component states",id:"adding-component-states",level:2},{value:"Adding lights",id:"adding-lights",level:2},{value:"Taking control of the camera",id:"taking-control-of-the-camera",level:2},{value:"Exercise",id:"exercise",level:2}],h={toc:u};function g(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This basic tutorial will help us setup our first Angular Three scene and introduce us to its core concepts."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This tutorial assumes basic knowledge of ",(0,i.kt)("a",{parentName:"p",href:"https://angular.io"},"Angular")," and ",(0,i.kt)("a",{parentName:"p",href:"https://threejs.org"},"THREE.js")))),(0,i.kt)("h2",{id:"tldr"},"TLDR;"),(0,i.kt)("p",null,"The tutorial is a bit long so here's the TLDR; version for folks that want to get straight to the code."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We set up a Canvas with ",(0,i.kt)("inlineCode",{parentName:"li"},"<ngt-canvas>")," which is the entry point to our NGT scene graph"),(0,i.kt)("li",{parentName:"ul"},"We use ",(0,i.kt)("inlineCode",{parentName:"li"},"<ngt-mesh>")," along with ",(0,i.kt)("inlineCode",{parentName:"li"},"<ngt-box-geometry>")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"<ngt-mesh-standard-material>")," to construct a cube then animate it"),(0,i.kt)("li",{parentName:"ul"},"We separate our ",(0,i.kt)("inlineCode",{parentName:"li"},"<ngt-mesh>"),", along with its internal states, into a reusable Angular component so we can have more than one cube"),(0,i.kt)("li",{parentName:"ul"},"We set up some lighting to make our cubes more dynamic"),(0,i.kt)("li",{parentName:"ul"},"We introduce ",(0,i.kt)("inlineCode",{parentName:"li"},"@angular-three/soba")," library and add the ",(0,i.kt)("inlineCode",{parentName:"li"},"<ngt-soba-orbit-controls>")," to take controls of the Camera")),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"appComponentHtml",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas>\n  <ngt-ambient-light intensity="0.5"></ngt-ambient-light>\n  <ngt-spot-light [position]="10" angle="0.15" penumbra="1"></ngt-spot-light>\n  <ngt-point-light [position]="-10"></ngt-point-light>\n\n  <app-cube [position]="[1.2, 0, 0]"></app-cube>\n  <app-cube [position]="[-1.2, 0, 0]"></app-cube>\n\n  <ngt-soba-orbit-controls></ngt-soba-orbit-controls>\n</ngt-canvas>\n'))),(0,i.kt)(r.Z,{value:"appComponentTs",label:"app.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}\n"))),(0,i.kt)(r.Z,{value:"cubeComponentHtml",label:"cube.component.html",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-mesh\n  (beforeRender)="onCubeBeforeRender($event)"\n  (click)="active = !active"\n  (pointerover)="hovered = true"\n  (pointerout)="hovered = false"\n  [scale]="active ? 1.5 : 1"\n  [position]="position"\n>\n  <ngt-box-geometry></ngt-box-geometry>\n  <ngt-mesh-standard-material [color]="hovered ? \'turquoise\' : \'tomato\'"></ngt-mesh-standard-material>\n</ngt-mesh>\n'))),(0,i.kt)(r.Z,{value:"cubeComponentTs",label:"cube.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'app-cube',\n  templateUrl: 'cube.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CubeComponent {\n  @Input() position?: NgtVector3;\n\n  hovered = false;\n  active = false;\n\n  onCubeBeforeRender($event: { state: NgtRenderState; object: Mesh }) {\n    const cube = $event.object;\n    cube.rotation.x += 0.01;\n  }\n}\n"))),(0,i.kt)(r.Z,{value:"styles",label:"styles.css",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},"/* You can add global styles to this file, and also import other style files */\n\nhtml,\nbody {\n  font-family: sans-serif;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n}\n"))),(0,i.kt)(r.Z,{value:"appModuleTs",label:"app.module.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@NgModule({\n  declarations: [AppComponent, CubeComponent],\n  imports: [\n    BrowserModule,\n    NgtCanvasModule,\n    NgtMeshModule,\n    NgtBoxGeometryModule,\n    NgtMeshStandardMaterialModule,\n    NgtAmbientLightModule,\n    NgtSpotLightModule,\n    NgtPointLightModule,\n    NgtSobaOrbitControlsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n")))),(0,i.kt)("h2",{id:"setting-up-the-canvas"},"Setting up the Canvas"),(0,i.kt)("p",null,"The scene graph in NGT starts with the ",(0,i.kt)("inlineCode",{parentName:"p"},"CanvasComponent"),". Let's start by putting ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-canvas>")," on our ",(0,i.kt)("inlineCode",{parentName:"p"},"app.component.html"),", and import ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtCanvasModule")," in our ",(0,i.kt)("inlineCode",{parentName:"p"},"app.module.ts")),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"html",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"// highlight-start\n<ngt-canvas></ngt-canvas>\n// highlight-end\n"))),(0,i.kt)(r.Z,{value:"module",label:"app.module.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// highlight-start\n//          \ud83d\udc47 this provides the CanvasComponent\nimport { NgtCanvasModule } from '@angular-three/core';\n// highlight-end\n\n@NgModule({\n  /* ... */\n  imports: [\n    /* ... */\n    // highlight-start\n    NgtCanvasModule,\n    // highlight-end\n  ],\n  /* ... */\n})\nexport class AppModule {}\n")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ngt-canvas")," sets up the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"WebGLRenderer"),", a default ",(0,i.kt)("inlineCode",{parentName:"li"},"Scene"),", and a default ",(0,i.kt)("inlineCode",{parentName:"li"},"Camera")," which are the basic building blocks for any THREE scene graph."),(0,i.kt)("li",{parentName:"ul"},"A render loop that renders our scene every frame"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"window:resize")," listener that updates our Renderer and Camera when the viewport is resized. The listener will automatically get cleaned up when the ",(0,i.kt)("inlineCode",{parentName:"li"},"<ngt-canvas>")," component is destroyed")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-canvas>")," is responsive to fit the parent element dimension so we can control how big or small our 3D scene is by adjusting the width and height of the parent element."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!--        \ud83d\udc47 we can CSS this class to control the size as well as the position of our Scene --\x3e\n<div class="canvas-container">\n  <ngt-canvas></ngt-canvas>\n</div>\n')))),(0,i.kt)("p",null,"Next, let's adjust our global ",(0,i.kt)("inlineCode",{parentName:"p"},"styles.css")," a bit to make the viewport 100% width and height."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"styles",label:"styles.css",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},"html,\nbody {\n  height: 100%;\n  width: 100%;\n  margin: 0;\n}\n")))),(0,i.kt)("h2",{id:"adding-a-mesh"},"Adding a Mesh"),(0,i.kt)("p",null,"Our scene is empty at the moment. Let's fill it with our first THREE Object3D by rendering a ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-mesh>")," component, which wraps ",(0,i.kt)("inlineCode",{parentName:"p"},"THREE.Mesh"),"."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"html",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<ngt-canvas>\n  // highlight-start\n  \x3c!-- \ud83d\udc47 renders the Mesh --\x3e\n  <ngt-mesh></ngt-mesh>\n  // highlight-end\n</ngt-canvas>\n"))),(0,i.kt)(r.Z,{value:"module",label:"app.module.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { NgtCanvasModule } from '@angular-three/core';\n// highlight-start\n//          \ud83d\udc47 this provides the MeshComponent\nimport { NgtMeshModule } from '@angular-three/core/meshes';\n// highlight-end\n\n@NgModule({\n  /* ... */\n  imports: [\n    /* ... */\n    NgtCanvasModule,\n    // highlight-start\n    NgtMeshModule,\n    // highlight-end\n  ],\n  /* ... */\n})\nexport class AppModule {}\n")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"THREE.Mesh")," is the one of the most fundamental objects in THREE.js, and it is used to hold a ",(0,i.kt)("strong",{parentName:"p"},"Geometry")," and a ",(0,i.kt)("strong",{parentName:"p"},"Material")," needed to represent a shape in the 3D space. We'll use ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-box-geometry>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-mesh-basic-material>")," to create a cube."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"html",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<ngt-canvas>\n  <ngt-mesh>\n    // highlight-start\n    <ngt-box-geometry></ngt-box-geometry>\n    <ngt-mesh-basic-material></ngt-mesh-basic-material>\n    // highlight-end\n  </ngt-mesh>\n</ngt-canvas>\n"))),(0,i.kt)(r.Z,{value:"module",label:"app.module.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { NgtCanvasModule } from '@angular-three/core';\nimport { NgtMeshModule } from '@angular-three/core/meshes';\n// highlight-start\nimport { NgtBoxGeometryModule } from '@angular-three/core/geometries';\nimport { NgtMeshBasicMaterialModule } from '@angular-three/core/materials';\n// highlight-end\n\n@NgModule({\n  /* ... */\n  imports: [\n    /* ... */\n    NgtCanvasModule,\n    NgtMeshModule,\n    // highlight-start\n    NgtBoxGeometryModule,\n    NgtMeshBasicMaterialModule,\n    // highlight-end\n  ],\n  /* ... */\n})\nexport class AppModule {}\n")))),(0,i.kt)("p",null,"At this point, we have something on the scene that we can check out"),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/distracted-cherry-3zxs6n?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fapp%2Fapp.component.html&theme=dark&view=preview",title:"first-scene-first-cube",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("h2",{id:"animate-the-cube"},"Animate the cube"),(0,i.kt)("p",null,"3D scene is boring without any animation. Animation in THREE.js works in a simple manner. We are rendering our scene every frame so to animate an object, we can ",(0,i.kt)("em",{parentName:"p"},"move")," that object little by little ",(0,i.kt)("em",{parentName:"p"},"before")," every render. In NGT, all objects have a ",(0,i.kt)("inlineCode",{parentName:"p"},"(beforeRender)")," Output that we can listen and run some logic before the scene is rendered. Let's use ",(0,i.kt)("inlineCode",{parentName:"p"},"(beforeRender)")," to animate our cube"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"html",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas>\n  \x3c!--                        \ud83d\udc47 we are handling this in our component class --\x3e\n  <ngt-mesh (beforeRender)="onCubeBeforeRender($event)">\n    <ngt-box-geometry></ngt-box-geometry>\n    <ngt-mesh-basic-material></ngt-mesh-basic-material>\n  </ngt-mesh>\n</ngt-canvas>\n'))),(0,i.kt)(r.Z,{value:"ts",label:"app.component.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { NgtRenderState } from '@angular-three/core';\nimport { Mesh } from 'three';\n\n@Component({\n  /* ... */\n  template: 'app.component.html',\n  /* ... */\n})\nexport class AppComponent {\n  onCubeBeforeRender($event: { state: NgtRenderState; object: Mesh }) {\n    const cube = $event.object;\n    // we are rotating our cube little by little before it gets rendered\n    cube.rotation.x += 0.01;\n  }\n}\n")))),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/first-scene-first-cube-animated-2tegkl?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fapp%2Fapp.component.html&theme=dark&view=preview",title:"first-scene-first-cube-animated",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"(beforeRender)")," is invoked outside of Angular Zone to maintain the performance. Please try ",(0,i.kt)("strong",{parentName:"li"},"NOT")," to update any component state in ",(0,i.kt)("inlineCode",{parentName:"li"},"beforeRender")," handler"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$event.state")," is the object that holds the current information about the Canvas: viewport, mouse position, clock, delta etc..."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$event.object")," is the Object3D that is being handled in this particular ",(0,i.kt)("inlineCode",{parentName:"li"},"beforeRender")," callback.")))),(0,i.kt)("p",null,"That was easy! Before we move on, let's pause for a moment to understand what is happening here."),(0,i.kt)("p",null,"Minus all the module imports, our scene is about 6 lines of code + 3 lines of ",(0,i.kt)("inlineCode",{parentName:"p"},"onCubeBeforeRender")," for animation. Here's the equivalence in vanilla THREE.js code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, document.clientWidth / document.clientHeight, 0.1, 1000);\n\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(document.clientWidth, document.clientHeight);\ndocument.querySelector('app-root').appendChild(renderer.domElement);\n\n/**\n * code to handle window:resize goes here\n */\n\nconst cube = new THREE.Mesh();\ncube.geometry = new THREE.BoxGeometry();\ncube.material = new THREE.MeshBasicMaterial();\n\nscene.add(cube);\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  cube.rotation.x += 0.01;\n  renderer.render(scene, camera);\n}\n\nanimate();\n")),(0,i.kt)("p",null,"Vanilla THREE.js does not look so bad either. However, by leveraging Angular template, we are able to express our Scene in a declarative way. We can use Angular template expression like ",(0,i.kt)("inlineCode",{parentName:"p"},"*ngIf")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"*ngFor")," to allow our scene to be more dynamic In addition, the objects on our scene are also aware of their life-cycles which means they can clean themselves up when they are ",(0,i.kt)("em",{parentName:"p"},"destroyed"),"."),(0,i.kt)("p",null,"Next section of the tutorial will show even a ",(0,i.kt)("em",{parentName:"p"},"better")," reason to use NGT. Let's continue"),(0,i.kt)("h2",{id:"making-our-cube-an-angular-component"},"Making our cube an Angular component"),(0,i.kt)("p",null,"What is better than one cube? TWO cubes! Let's start by making our cube an Angular component"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"cubeHtml",label:"cube.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-mesh (beforeRender)="onCubeBeforeRender($event)">\n  <ngt-box-geometry></ngt-box-geometry>\n  <ngt-mesh-basic-material></ngt-mesh-basic-material>\n</ngt-mesh>\n'))),(0,i.kt)(r.Z,{value:"cubeTs",label:"cube.component.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'app-cube',\n  templateUrl: 'cube.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CubeComponent {\n  // \ud83d\udc47 copy from AppComponent\n  onCubeBeforeRender($event: { state: NgtRenderState; object: Mesh }) {\n    const cube = $event.object;\n    cube.rotation.x += 0.01;\n  }\n}\n"))),(0,i.kt)(r.Z,{value:"appHtml",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<ngt-canvas>\n  <app-cube></app-cube>\n</ngt-canvas>\n"))),(0,i.kt)(r.Z,{value:"appTs",label:"app.component.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  /* ... */\n  template: 'app.component.html',\n  /* ... */\n})\nexport class AppComponent {}\n"))),(0,i.kt)(r.Z,{value:"module",label:"app.module.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@NgModule({\n  declarations: [\n    AppComponent,\n    /* ... */\n    // highlight-start\n    CubeComponent,\n    // highlight-end\n    /* ... */\n  ],\n})\nexport class AppModule {}\n")))),(0,i.kt)("p",null,"Everything works the same as before but now we have a ",(0,i.kt)("inlineCode",{parentName:"p"},"CubeComponent")," that we can add states to to customize our cube."),(0,i.kt)("h2",{id:"adding-component-states"},"Adding component states"),(0,i.kt)("p",null,"We will add two states: ",(0,i.kt)("inlineCode",{parentName:"p"},"hovered")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"active")," to our ",(0,i.kt)("inlineCode",{parentName:"p"},"CubeComponent")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When we hover over our cube, we set ",(0,i.kt)("inlineCode",{parentName:"li"},"hovered")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," and vice versa"),(0,i.kt)("li",{parentName:"ul"},"When we click on our cube, we toggle the ",(0,i.kt)("inlineCode",{parentName:"li"},"active")," state"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"active"),", the cube is 1.5 times bigger using ",(0,i.kt)("inlineCode",{parentName:"li"},"[scale]")),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"hovered"),", the cube has turquoise color and tomato color when not ",(0,i.kt)("inlineCode",{parentName:"li"},"hovered"),".")),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"cubeHtml",label:"cube.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-mesh\n    (beforeRender)="onCubeBeforeRender($event)"\n    // highlight-start\n    (click)="active = !active"\n    (pointerover)="hovered = true"\n    (pointerout)="hovered = false"\n    [scale]="active ? 1.5 : 1"\n    // highlight-end\n>\n    <ngt-box-geometry></ngt-box-geometry>\n    <ngt-mesh-basic-material\n        // highlight-start\n        [color]="hovered ? \'turquoise\' : \'tomato\'"\n        // highlight-end\n    ></ngt-mesh-basic-material>\n</ngt-mesh>\n'))),(0,i.kt)(r.Z,{value:"cubeTs",label:"cube.component.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'app-cube',\n  templateUrl: 'cube.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CubeComponent {\n  // highlight-start\n  hovered = false;\n  active = false;\n  // highlight-end\n\n  onCubeBeforeRender($event: { state: NgtRenderState; object: Mesh }) {\n    const cube = $event.object;\n    cube.rotation.x += 0.01;\n  }\n}\n")))),(0,i.kt)("p",null,"Interact with the cube and see the magic \ud83e\udd2f"),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/first-scene-first-cube-component-nsfx98?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fapp%2Fcube.component.html&theme=dark&view=preview",title:"first-scene-first-cube-component",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"(click)"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"(pointerover)"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"(pointerout)")," look like DOM events but they are not. They are named as such to give a sense of familiarity to improve Developer Experience (DX)."),(0,i.kt)("li",{parentName:"ul"},"These events get back into Angular Zone so that triggering these events can update Component's state (eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"hovered")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"active"),") and trigger Change Detection cycles. Normally, NGT bails out of Angular Zone to maintain the framerate.")),(0,i.kt)("p",null,"Now that our cube is interactive and fun, we can render another cube so we can double the fun. But first, we need to add a ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," Input to our ",(0,i.kt)("inlineCode",{parentName:"p"},"CubeComponent"),". This allows us to position our ",(0,i.kt)("inlineCode",{parentName:"p"},"CubeComponent")," in different positions so we can see them all on the scene."),(0,i.kt)("p",null,"Good. Now we can update our ",(0,i.kt)("inlineCode",{parentName:"p"},"app.component.html")," to render another cube"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"appHtml",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas>\n  \x3c!--                    \ud83d\udc47 move this cube 1.2 unit to the right --\x3e\n  <app-cube [position]="[1.2, 0, 0]"></app-cube>\n  \x3c!--                    \ud83d\udc47 move this cube 1.2 unit to the left --\x3e\n  <app-cube [position]="[-1.2, 0, 0]"></app-cube>\n</ngt-canvas>\n')))),(0,i.kt)("p",null,"and voila!"),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/first-scene-first-cube-two-cubes-ytbh3o?fontsize=14&hidenavigation=1&theme=dark&view=preview",title:"first-scene-first-cube-two-cubes",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("h2",{id:"adding-lights"},"Adding lights"),(0,i.kt)("p",null,"Our cubes are animated and reactive. But they look bland. They don't even look like cubes at the moment. It is because they lack Light Reflection."),(0,i.kt)("p",null,"First, let's switch out ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-mesh-basic-material>")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-mesh-standard-material>")),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"cubeHtml",label:"cube.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"<ngt-mesh>\n    <ngt-box-geometry></ngt-box-geometry>\n-   <ngt-mesh-basic-material></ngt-mesh-basic-material>\n+   <ngt-mesh-standard-material></ngt-mesh-standard-material>\n</ngt-mesh>\n"))),(0,i.kt)(r.Z,{value:"module",label:"app.module.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"-\n+\n\n@NgModule({\n    /* ... */\n    imports: [\n        /* ... */\n        NgtCanvasModule,\n        NgtMeshModule,\n        NgtBoxGeometryModule,\n-       NgtMeshBasicMaterialModule,\n+       NgtMeshStandardMaterialModule,\n    ],\n    /* ... */\n})\nexport class AppModule {}\n")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We can check it out now and notice that our cubes are pitch black. This is because ",(0,i.kt)("inlineCode",{parentName:"p"},"MeshStandardMaterial"),' is a material that needs to be lit up by lights. Imagine a dark room with no lights, any object would be black. Our scene background just happens to be "white" by default.'))),(0,i.kt)("p",null,"Next, let's start adding lights. We'll use ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-ambient-light>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-spot-light>"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-point-light>")),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"appHtml",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas>\n  // highlight-start\n  <ngt-ambient-light intensity="0.5"></ngt-ambient-light>\n  <ngt-spot-light [position]="10" angle="0.15" penumbra="1"></ngt-spot-light>\n  <ngt-point-light [position]="-10"></ngt-point-light>\n  // highlight-end\n\n  <app-cube [position]="[1.2, 0, 0]"></app-cube>\n  <app-cube [position]="[-1.2, 0, 0]"></app-cube>\n</ngt-canvas>\n'))),(0,i.kt)(r.Z,{value:"module",label:"app.module.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// highlight-start\nimport { NgtAmbientLightModule, NgtSpotLightModule, NgtPointLightModule } from '@angular-three/core/lights';\n// highlight-end\n\n@NgModule({\n  /* ... */\n  imports: [\n    /* ... */\n    NgtCanvasModule,\n    NgtMeshModule,\n    NgtBoxGeometryModule,\n    NgtMeshStandardMaterialModule,\n    // highlight-start\n    NgtAmbientLightModule,\n    NgtSpotLightModule,\n    NgtPointLightModule,\n    // highlight-end\n  ],\n  /* ... */\n})\nexport class AppModule {}\n")))),(0,i.kt)("p",null,"Our cubes look so much better now, with dimensionality, showing that they are real 3D objects."),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/first-scene-first-cube-lights-ntifzu?fontsize=14&hidenavigation=1&theme=dark&view=preview",title:"first-scene-first-cube-lights",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("h2",{id:"taking-control-of-the-camera"},"Taking control of the camera"),(0,i.kt)("p",null,"Who hasn't tried to \"grab\" the scene and move it around? We cannot do that yet as our Camera is static in its position. Let's take over the Camera with ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-soba-orbit-controls>"),". To do that, we need to install another NGT library ",(0,i.kt)("inlineCode",{parentName:"p"},"@angular-three/soba")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"soba"),' is a Vietnamese word ("S\u1ed1 Ba") and it literally means "Number 3" (as in THREEE.js)'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @angular-three/soba\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@angular-three/soba")," is a collection of utilities ported from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pmndrs/drei"},"React Three Drei")," that makes it easier to work with 3D scenes. One of those utilities is ",(0,i.kt)("inlineCode",{parentName:"p"},"OrbitControls")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All utilities exported from ",(0,i.kt)("inlineCode",{parentName:"p"},"@angular-three/soba")," are prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"ngt-soba")))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"appHtml",label:"app.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas>\n  <ngt-ambient-light intensity="0.5"></ngt-ambient-light>\n  <ngt-spot-light [position]="10" angle="0.15" penumbra="1"></ngt-spot-light>\n  <ngt-point-light [position]="-10"></ngt-point-light>\n\n  <app-cube [position]="[1.2, 0, 0]"></app-cube>\n  <app-cube [position]="[-1.2, 0, 0]"></app-cube>\n\n  // highlight-start\n  <ngt-soba-orbit-controls></ngt-soba-orbit-controls>\n  // highlight-end\n</ngt-canvas>\n'))),(0,i.kt)(r.Z,{value:"module",label:"app.module.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { NgtAmbientLightModule, NgtSpotLightModule, NgtPointLightModule } from '@angular-three/core/lights';\n// highlight-end\n\n@NgModule({\n  /* ... */\n  imports: [\n    /* ... */\n    NgtCanvasModule,\n    NgtMeshModule,\n    NgtBoxGeometryModule,\n    NgtMeshStandardMaterialModule,\n    NgtAmbientLightModule,\n    NgtSpotLightModule,\n    NgtPointLightModule,\n    // highlight-start\n    NgtSobaOrbitControlsModule,\n    // highlight-end\n  ],\n  /* ... */\n})\nexport class AppModule {}\n")))),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/first-scene-first-cube-controls-kz16d9?fontsize=14&hidenavigation=1&theme=dark&view=preview",title:"first-scene-first-cube-controls",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("p",null,"and that concludes our first tutorial. That was fun!"),(0,i.kt)("h2",{id:"exercise"},"Exercise"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Try playing with the colors"),(0,i.kt)("li",{parentName:"ul"},"Try using a different Geometry to display something other than a cube"),(0,i.kt)("li",{parentName:"ul"},"Try placing more objects using different positions"),(0,i.kt)("li",{parentName:"ul"},"Try different lights")))}g.isMDXComponent=!0}}]);