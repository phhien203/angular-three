"use strict";(self.webpackChunklibs_documentations=self.webpackChunklibs_documentations||[]).push([[482],{9613:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var o=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,d=m["".concat(s,".").concat(u)]||m[u]||h[u]||i;return n?o.createElement(d,r(r({ref:t},p),{},{components:n})):o.createElement(d,r({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4081:function(e,t,n){n.d(t,{Z:function(){return a}});var o=n(9496);function a(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},5468:function(e,t,n){n.d(t,{Z:function(){return p}});var o=n(2848),a=n(9496),i=n(4390),r=n(7269),l=n(1626),s="tabItem_JjfE";function c(e){var t,n,i,c=e.lazy,p=e.block,h=e.defaultValue,m=e.values,u=e.groupId,d=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=m?m:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,r.lx)(y,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===h?h:null!=(t=null!=h?h:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=g[0])?void 0:i.props.value;if(null!==f&&!y.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,r.UB)(),k=v.tabGroupChoices,x=v.setTabGroupChoices,N=(0,a.useState)(f),w=N[0],P=N[1],C=[],T=(0,r.o5)().blockElementScrollPositionUntilNextRender;if(null!=u){var B=k[u];null!=B&&B!==w&&y.some((function(e){return e.value===B}))&&P(B)}var S=function(e){var t=e.currentTarget,n=C.indexOf(t),o=y[n].value;o!==w&&(T(t),P(o),null!=u&&x(u,o))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var o=C.indexOf(e.currentTarget)+1;n=C[o]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;n=C[a]||C[C.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},d)},y.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return C.push(e)},onKeyDown:I,onFocus:S,onClick:S},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),c?(0,a.cloneElement)(g.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function p(e){var t=(0,i.Z)();return a.createElement(c,(0,o.Z)({key:String(t)},e))}},2964:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return c},metadata:function(){return h},toc:function(){return u}});var o=n(2848),a=n(9213),i=(n(9496),n(9613)),r=n(5468),l=n(4081),s=["components"],c={id:"first-physics-scene",title:"First Physics Scene",sidebar_label:"First Physics Scene"},p=void 0,h={unversionedId:"cannon/first-physics-scene",id:"cannon/first-physics-scene",title:"First Physics Scene",description:"In this tutorial, we are going to build a simple scene with physics, specifically with @angular-three/cannon to learn its API",source:"@site/docs/cannon/first-physics-scene.mdx",sourceDirName:"cannon",slug:"/cannon/first-physics-scene",permalink:"/docs/cannon/first-physics-scene",editUrl:"https://github.com/nartc/angular-three/tree/main/libs/documentations/docs/docs/cannon/first-physics-scene.mdx",tags:[],version:"current",frontMatter:{id:"first-physics-scene",title:"First Physics Scene",sidebar_label:"First Physics Scene"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/cannon/overview"},next:{title:"Physics",permalink:"/docs/cannon/physics"}},m={},u=[{value:"Setup Canvas",id:"setup-canvas",level:2},{value:"Add Physics container",id:"add-physics-container",level:2},{value:"Add a floor",id:"add-a-floor",level:2},{value:"Add a box",id:"add-a-box",level:2},{value:"Exercise",id:"exercise",level:2}],d={toc:u};function g(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this tutorial, we are going to build a simple scene with physics, specifically with ",(0,i.kt)("inlineCode",{parentName:"p"},"@angular-three/cannon")," to learn its API"),(0,i.kt)("p",null,"Let's take a peak at what we're going to create"),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/simple-physic-cubes-em5xnj?fontsize=14&hidenavigation=1&theme=dark&view=preview",title:"simple-physic-cubes",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("h2",{id:"setup-canvas"},"Setup Canvas"),(0,i.kt)("p",null,"We'll set up our ",(0,i.kt)("inlineCode",{parentName:"p"},"ngt-canvas")," with some lighting configurations"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  \x3c!-- \ud83d\udc47 makes our Scene.background lightblue --\x3e\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  \x3c!-- \ud83d\udc47 add some lights --\x3e\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n</ngt-canvas>\n\n\x3c!-- \ud83d\udc47 monitor the FPS --\x3e\n<ngt-stats></ngt-stats>\n'))),(0,i.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { NgtCanvasModule } from '@angular-three/core';\nimport { NgtStatsModule } from '@angular-three/core/stats';\nimport { NgtAmbientLightModule, NgtDirectionalLightModule } from '@angular-three/core/lights';\nimport { NgtColorAttributeModule, NgtVector2AttributeModule } from '@angular-three/core/attributes';\n\n@Component({\n  selector: 'physic-boxes',\n  templateUrl: 'physic-boxes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PhysicBoxesComponent {}\n\n@NgModule({\n  imports: [\n    NgtCanvasModule,\n    NgtAmbientLightModule,\n    NgtDirectionalLightModule,\n    NgtStatsModule,\n    NgtColorAttributeModule,\n    NgtVector2AttributeModule,\n  ],\n  declarations: [PhysicBoxesComponent],\n  exports: [PhysicBoxesComponent],\n})\nexport class PhysicsBoxesModule {}\n")))),(0,i.kt)("h2",{id:"add-physics-container"},"Add Physics container"),(0,i.kt)("p",null,"All objects that are participating in the Physic World need to be rendered inside of ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-physics>")," component. Let's update our ",(0,i.kt)("inlineCode",{parentName:"p"},"physic-boxes.component.html")," to render that"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n\n  // highlight-start\n  <ngt-physics>\n    \x3c!-- our objects will go in here --\x3e\n  </ngt-physics>\n  // highlight-end\n</ngt-canvas>\n\n<ngt-stats></ngt-stats>\n'))),(0,i.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/* ... */\n// highlight-start\nimport { NgtPhysicsModule } from '@angular-three/cannon';\n// highlight-end\n\n@Component({\n  /* ... */\n})\nexport class PhysicBoxesComponent {}\n\n@NgModule({\n  imports: [\n    /* ... */\n    // highlight-start\n    NgtPhysicsModule,\n    // highlight-end\n  ],\n  declarations: [PhysicBoxesComponent],\n  exports: [PhysicBoxesComponent],\n})\nexport class PhysicsBoxesModule {}\n")))),(0,i.kt)("h2",{id:"add-a-floor"},"Add a floor"),(0,i.kt)("p",null,'Next, we\'ll add our "floor". A floor is usually a ',(0,i.kt)("inlineCode",{parentName:"p"},"THREE.Mesh")," with a ",(0,i.kt)("inlineCode",{parentName:"p"},"THREE.PlaneGeometry")),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"floorHtml",label:"floor.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-mesh receiveShadow [ref]="planeRef.ref" [position]="position" [rotation]="rotation">\n  <ngt-plane-geometry [args]="[1000, 1000]"></ngt-plane-geometry>\n  <ngt-shadow-material color="#171717" transparent opacity="0.4"></ngt-shadow-material>\n</ngt-mesh>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We have a ",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-mesh")," that can receive shadow with ",(0,i.kt)("inlineCode",{parentName:"li"},"receiveShadow")),(0,i.kt)("li",{parentName:"ul"},"We attach a ",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-plane-geometry")," with 1000 width and height and a transparent ",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-shadow-material")," to this ",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-mesh")),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"planeRef")," is created externally by ",(0,i.kt)("inlineCode",{parentName:"li"},"NgtPhysicBody")," and passed into the ",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-mesh"),". Remember how an ",(0,i.kt)("a",{parentName:"li",href:"../core/instance"},(0,i.kt)("inlineCode",{parentName:"a"},"NgtInstance"))," works?"))),(0,i.kt)(l.Z,{value:"floorTs",label:"floor.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'physic-floor',\n  templateUrl: 'floor.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // \ud83d\udc47 we provide NgtPhysicBody for this Floor\n  providers: [NgtPhysicBody],\n})\nexport class PhysicFloorComponent {\n  @Input() position?: NgtTriple;\n  rotation = [-Math.PI / 2, 0, 0] as NgtTriple;\n\n  // \ud83d\udc47 create a ref with the Body API\n  // \ud83d\udc47                        \ud83d\udc47 we are working with a PlaneGeometry\n  planeRef = this.physicBody.usePlane(() => ({\n    //      \ud83d\udc47 we provide the same args to usePlane as we do on the ngt-plane-geometry\n    args: [1000, 1000],\n    //      \ud83d\udc47 same for the initial position and rotation\n    rotation: this.rotation,\n    position: this.position,\n  }));\n\n  //                      \ud83d\udc47 inject the provided NgtPhysicBody to have access to the Body API\n  constructor(private physicBody: NgtPhysicBody) {}\n}\n"))),(0,i.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/* ... */\n// highlight-start\nimport { PhysicFloorComponent } from './floor.component';\n// highlight-end\n\n@Component({\n  /* ... */\n})\nexport class PhysicBoxesComponent {}\n\n@NgModule({\n  imports: [\n    /* ... */\n  ],\n  declarations: [\n    PhysicBoxesComponent,\n    // highlight-start\n    PhysicFloorComponent,\n    // highlight-end\n  ],\n  exports: [PhysicBoxesComponent],\n})\nexport class PhysicsBoxesModule {}\n"))),(0,i.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n\n  <ngt-physics>\n    // highlight-start\n    <physic-floor [position]="[0, -2.5, 0]"></physic-floor>\n    // highlight-end\n  </ngt-physics>\n</ngt-canvas>\n\n<ngt-stats></ngt-stats>\n')))),(0,i.kt)("h2",{id:"add-a-box"},"Add a box"),(0,i.kt)("p",null,"Now that we have a floor, we can ",(0,i.kt)("em",{parentName:"p"},"drop")," things on it. In this case, the thing is going to be a Box"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"boxHtml",label:"box.component.html",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-mesh receiveShadow castShadow [ref]="boxRef.ref" [position]="position" [rotation]="rotation">\n  <ngt-box-geometry></ngt-box-geometry>\n  <ngt-mesh-lambert-material color="tomato"></ngt-mesh-lambert-material>\n</ngt-mesh>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Similar to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Floor"),", we create a ",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-mesh")," that can receive shadow (",(0,i.kt)("inlineCode",{parentName:"li"},"receiveShadow"),") AND can cast shadow (",(0,i.kt)("inlineCode",{parentName:"li"},"castShadow"),")"),(0,i.kt)("li",{parentName:"ul"},"We're using ",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-box-geometry")," to represent a box"),(0,i.kt)("li",{parentName:"ul"},"We're using a material (",(0,i.kt)("inlineCode",{parentName:"li"},"ngt-mesh-lambert-material"),") that can react to lights and create shadows"),(0,i.kt)("li",{parentName:"ul"},"We use ",(0,i.kt)("inlineCode",{parentName:"li"},"boxRef")," that is created by ",(0,i.kt)("inlineCode",{parentName:"li"},"NgtPhysicBody")," the same way we used ",(0,i.kt)("inlineCode",{parentName:"li"},"planeRef")))),(0,i.kt)(l.Z,{value:"boxTs",label:"box.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'physic-box',\n  templateUrl: 'box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // \ud83d\udc47 provide the Physic Body API\n  providers: [NgtPhysicBody],\n})\nexport class PhysicBoxComponent {\n  @Input() position?: NgtTriple;\n  rotation = [0.4, 0.2, 0.5] as NgtTriple;\n\n  // \ud83d\udc47 create a Box ref by the Physic Body API\n  // \ud83d\udc47                        \ud83d\udc47 we're working with ngt-box-geometry so we're utilizing useBox\n  boxRef = this.physicBody.useBox(() => ({\n    mass: 1,\n    position: this.position,\n    rotation: this.rotation,\n  }));\n\n  //                      \ud83d\udc47 inject the Physic Body API\n  constructor(private physicBody: NgtPhysicBody) {}\n}\n"))),(0,i.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/* ... */\n// highlight-start\nimport { PhysicBoxComponent } from './box.component';\n// highlight-end\n\n@Component({\n  /* ... */\n})\nexport class PhysicBoxesComponent {}\n\n@NgModule({\n  imports: [\n    /* ... */\n  ],\n  declarations: [\n    PhysicBoxesComponent,\n    PhysicFloorComponent,\n    // highlight-start\n    PhysicBoxComponent,\n    // highlight-end\n  ],\n  exports: [PhysicBoxesComponent],\n})\nexport class PhysicsBoxesModule {}\n"))),(0,i.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n\n  <ngt-physics>\n    <physic-floor [position]="[0, -2.5, 0]"></physic-floor>\n    // highlight-start\n    <physic-box [position]="[0.1, 5, 0]"></physic-box>\n    // highlight-end\n  </ngt-physics>\n</ngt-canvas>\n\n<ngt-stats></ngt-stats>\n')))),(0,i.kt)("p",null,"Stop here and we'll have a single box dropping on the floor. Fun, right?!"),(0,i.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/simple-physic-cubes-single-cube-v4jbrl?fontsize=14&hidenavigation=1&theme=dark&view=preview",title:"simple-physic-cubes-single-cube",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,i.kt)("p",null,"All that's left to do is to render more ",(0,i.kt)("inlineCode",{parentName:"p"},"physic-box")," \ud83d\ude04. Play with the ",(0,i.kt)("inlineCode",{parentName:"p"},"[position]")," to your heart content"),(0,i.kt)("h2",{id:"exercise"},"Exercise"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Try different colors and shapes"),(0,i.kt)("li",{parentName:"ul"},"Try different physic parameters (eg: mass)")))}g.isMDXComponent=!0}}]);